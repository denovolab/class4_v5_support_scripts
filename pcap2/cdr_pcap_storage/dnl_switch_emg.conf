[pcapstorage]
STORAGE_TYPE = ftp
FTP_USER = pcap_storage
FTP_PORT = 21
FTP_PASS = nQ6rzmLwqpDW23ve
FTP_HOST = 176.9.30.112

#STORAGE_TYPE = gcs
#PROJECT_NAME = cdr-testing
#CREDENTIALS_FILE = %(home)s/pcap2/cdr-testing-3986cdf1eacb.json
# MAX_FILES_CYCLE is a limit of files to process at single cycle, one run.
MAX_FILES_CYCLE = 1000
[cdrstorage]
STORAGE_TYPE = ftp
FTP_USER = cdrbackup
FTP_PORT = 21
FTP_PASS = 59DuM3N4y8Mr5LXK
FTP_HOST = 108.165.2.57
#STORAGE_TYPE = gcs
#PROJECT_NAME = cdr-testing
#CREDENTIALS_FILE = %(home)s/pcap2/cdr-testing-3986cdf1eacb.json
# MAX_FILES_CYCLE is a limit of files to process at single cycle, one run.
MAX_FILES_CYCLE = 1000
[pcap]
UI_ips = 127.0.0.1,192.99.10.113,62.231.20.101,149.56.44.190,46.39.231.132,46.39.231.248,69.27.168.35
CDR_SUPPORT = enabled
GCS_SUPPORT = enabled
SFTP_SUPPORT = disabled
TCPDUMP_DIR = %(home)s/pcap2/tcpdumpdir/
TCPDUMP_USER = denovo
LOG_FILE = /var/tmp/pcaploaderd_emg.log
VOICE_PORT = 5060
VOICE_IPS = 69.27.168.50,69.27.168.3,108.165.2.93,69.27.168.51
tshark = /usr/sbin/tshark
lzcat = /usr/bin/lzcat
tcpdump = /usr/sbin/tcpdump
lsof = /usr/sbin/lsof
tar = /usr/bin/tar
TCPDUMP_STOP = no
PCAP_DIR = %(home)s/pcap2/tmppcap/
STAGING_DIR = %(home)s/pcap2/tmp/
WEB_PUBLIC_DIR = %(home)s/pcap2/wwwpub/
WEB_PUBLIC_URL = 69.27.168.50:8000/api/v1.0/wwwpub/
lzcat = /usr/bin/lzcat
# not used pcap maxmum call duration (in seconds)
DURATION_LIMIT = 600
# When searching for pcap one should look for `DURATION_MARGIN`
# seconds after the call is ended to make sure have full call flow.
DURATION_MARGIN = 60
# Instruct script to skip files earlier than
# `SKIP_PCAP_NEWER_SECONDS` seconds ago.
SKIP_PCAP_NEWER_SECONDS = 180
# The time the command is allowed to spend. Used now only in get_pid().
COMMAND_TIMEOUT = 600.0
STORAGE_DIR = pcap_emg
STORAGE_DIR_CDR = cdr_emg/cdr
STAGING_DIR_CDR = %(home)s/pcap2/tmp_cdr/
API_PATH = %(home)s/pcap2
CDR_DIR = /data1/c4/emg_v5/dnl_softswitch/cdr/
mawk = /usr/bin/mawk
# The loaderd turned to use pool with not more than `UPLOADERS_POOL` processes.
UPLOADERS_POOL = 10
INDEXFILE = %(home)s/testindex
INDEXPREFIX = /mnt/ftp_cdrbackup/192.99.10.113/cdr
# Move CDR packs to remote storage if older than `CDR_KEEP_DAYS` days.
CDR_KEEP_DAYS = 2
# Pack CDR files if older than `CDR_ARCHIVE_DAYS` days.
CDR_ARCHIVE_DAYS = 1
#class 4 v5 simple CDR header New Column set = new, Old Column = old.
CDR_HEADER = new
INDEXMOUNT = curlftpfs -o allow_other <login>:<pass>@<server> /mnt/ftp/
INDEXUMOUNT = umount /mnt/ftp/
LOG_DIR = /opt/denovo/log
# The only needed for an SQLite setup parameters are DB_API, DB_PCAP, DB_CDR.
# The others are left for a PostgreSQL setup backward compatibility.
# DB_API can be = sqlite or = pgsql.
DB_API = sqlite
# pcap database (scheme) name
DB_PCAP = /opt/denovo/pcap2/pcap_db
# database username
DB_USER = yaro_db
# database hostname
DB_HOST = 127.0.0.1
# database password
DB_PASSWORD = qwerty
[cdr]
# The only needed for an SQLite setup parameters are DB_API, DB_PCAP, DB_CDR.
# The others are left for a PostgreSQL setup backward compatibility.
# DB_API can be = sqlite or = pgsql.
DB_API = sqlite
# cdr database (scheme) name
DB_CDR = /opt/denovo/pcap2/cdr_db
# database username
DB_USER = yaro_db
# database hostname
DB_HOST = 127.0.0.1
# database password
DB_PASSWORD = qwerty
[cdrsmtp]
MAIL_USER = test@gmail.com
MAIL_PASS = test
MAIL_HOST = smtp.gmail.com
MAIL_PORT = 587
CDR_SUBJECT = CDR parsing completed
CDR_BODY = <b> CDR parsing </b> {from_time} {to_time} <br> search filter {search_parameter} <br>  completed with status {status} <br> . URL is {url}.
[billingpgsql]
host = 192.168.112.222
database = icxp_v5
password = all000dbNfmnfda
user = class4
[pcapparsd]
# Absolute log file path.
LOG_FILE = /opt/denovo/log/pcapparsd_emg.log
# Maximum log size in bytes before rotate.
LOG_MAX_BYTES = 1047000
# Number of log rotation pages.
LOG_BACKUP_COUNT = 30
# LOG_LEVEL: only CRITICAL=50, all DEBUG = 10, all and subprocess creating multiprocessing.SUBDEBUG = 5
LOG_LEVEL = 10

[cdrparsd]
# Absolute log file path.
LOG_FILE = /opt/denovo/log/cdrparsd_emg.log
# Maximum log size in bytes before rotate.
LOG_MAX_BYTES = 1047000
# Number of log rotation pages.
LOG_BACKUP_COUNT = 30
# LOG_LEVEL: only CRITICAL=50, all DEBUG = 10, all and subprocess creating multiprocessing.SUBDEBUG = 5
LOG_LEVEL = 10

[loaderd]
# Absolute log file path.
LOG_FILE = /opt/denovo/log/loaderd_emg.log
# Maximum log size in bytes before rotate.
LOG_MAX_BYTES = 1047000
# Number of log rotation pages.
LOG_BACKUP_COUNT = 30
# LOG_LEVEL: only CRITICAL=50, all DEBUG = 10, all and subprocess creating multiprocessing.SUBDEBUG = 5
LOG_LEVEL = 10
